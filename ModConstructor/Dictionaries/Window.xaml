<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ModConstructor.Dictionaries">
    <Style TargetType="Window" x:Key="CustomTitleBar">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="26" CornerRadius="0" UseAeroCaptionButtons="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Border BorderBrush="{DynamicResource AppColor}" BorderThickness="1">
                        <DockPanel LastChildFill="True">
                            <Border Background="{DynamicResource Background}" DockPanel.Dock="Top" Height="{x:Static SystemParameters.CaptionHeight}" x:Name="titlebar">
                                <Grid>
                                    <TextBlock Text="{TemplateBinding Title}" Margin="10,0,0,0" VerticalAlignment="Center">
                                        <TextBlock.Effect>
                                            <DropShadowEffect Color="White" ShadowDepth="3"/>
                                        </TextBlock.Effect>
                                    </TextBlock>
                                </Grid>
                            </Border>
                            <Border>
                                <ContentPresenter/>
                            </Border>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HeaderControl" TargetType="Button">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="Transparent"/>
    </Style>
    
    <Style x:Key="HeaderControlMinimize" TargetType="Button" BasedOn="{StaticResource HeaderControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="border" Background="Transparent"/>
                        <Path StrokeThickness="1.5" Stretch="None" Data="M0,8 H8 M0,7 H8 M0,6 H8" Stroke="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <ContentPresenter/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FF3F3F41"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource AppColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HeaderControlMaximize" TargetType="Button" BasedOn="{StaticResource HeaderControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="border" Background="Transparent"/>
                        <Path StrokeThickness="1.5" Stretch="None" Data="M0,0 H8 V8 H0 V0" Stroke="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <ContentPresenter/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FF3F3F41"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource AppColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HeaderControlClose" TargetType="Button" BasedOn="{StaticResource HeaderControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="border" Background="Transparent"/>
                        <Path StrokeThickness="1.5" Stretch="None" Data="M0,0 L8,8 M0,8 L8,0" Stroke="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <ContentPresenter/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FF3F3F41"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FFDC2832"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Logo" TargetType="Path">
        <Setter Property="Fill" Value="{DynamicResource AppColor}"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="Data" Value="m 1.6341912,24.473958 8.1709553,-9.921875 2.3345585,2.834822 -4.2022048,5.102678 H 18.520833 L 1.6341911,1.9843745 3.2683814,4.9999995e-7 23.189952,5.0000007e-7 24.824142,1.984375 16.653186,11.90625 14.318628,9.0714281 18.520833,3.9687494 H 7.9374999 L 24.824142,24.473958 23.189951,26.458333 H 3.2683824 Z"/>
    </Style>

    <Style x:Key="Icon" TargetType="Path" BasedOn="{StaticResource Logo}">
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Margin" Value="4"/>
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource Text}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TextDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0,4,0,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource Border}" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderBrush="Transparent" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid>
                <ContentPresenter Margin="6,2" ContentSource="Header" RecognizesAccessKey="True"/>
                <Popup x:Name="Popup" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" Placement="Bottom">
                    <Grid x:Name="PopupContent" Margin="0,0,5,5">
                        <Border x:Name="SubmenuBorder" Background="{DynamicResource Control}" BorderBrush="{DynamicResource ControlBorder}" BorderThickness="1" Padding="2,3,2,2">
                            <Border.Effect>
                                <DropShadowEffect Opacity="0.75"/>
                            </Border.Effect>
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Border>
                        <!--Rectangle VerticalAlignment="Top" HorizontalAlignment="Right" Height="1" Fill="{DynamicResource ControlBorder}" Margin="0,0,1,0">
                                <Rectangle.Width>
                                    <MultiBinding Converter="{DynamicResource DifferenceConverter}">
                                        <Binding ElementName="PopupContent" Path="ActualWidth"/>
                                        <Binding ElementName="Border" Path="ActualWidth"/>
                                    </MultiBinding>
                                </Rectangle.Width>
                            </-->
                    </Grid>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHover}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="IsOpen" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ControlBorder}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Control}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TextDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="MenuItem">
        <Border x:Name="Border" SnapsToDevicePixels="True">
            <Grid>
                <ContentPresenter Margin="6,2" ContentSource="Header" RecognizesAccessKey="True"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHover}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TextDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="Transparent" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="6,0" VerticalAlignment="Center" ContentSource="Icon"/>
                <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHover}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource TextDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="6,0" VerticalAlignment="Center" ContentSource="Icon"/>
                <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right"/>
                <Path x:Name="Arrow" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z"  Fill="{DynamicResource Text}"/>
                <Popup x:Name="Popup" Placement="Right" HorizontalOffset="2" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False">
                    <Grid x:Name="PopupContent"  Margin="0,0,5,5">
                        <Grid.Effect>
                            <DropShadowEffect Opacity="0.75"/>
                        </Grid.Effect>
                        <Border x:Name="SubmenuBorder" Background="{DynamicResource Control}" BorderBrush="{DynamicResource Border}" BorderThickness="0,1,1,1" Padding="2">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Border>
                        <Rectangle VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource Border}" Margin="0,0,0,1">
                            <Rectangle.Height>
                                <MultiBinding Converter="{DynamicResource DifferenceConverter}">
                                    <Binding ElementName="PopupContent" Path="ActualHeight"/>
                                    <Binding ElementName="Border" Path="ActualHeight"/>
                                </MultiBinding>
                            </Rectangle.Height>
                        </Rectangle>
                    </Grid>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHover}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource TextDisabled}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource TextDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>